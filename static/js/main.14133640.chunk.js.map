{"version":3,"sources":["components/AddWeightForm/AddWeightForm.js","components/AddMealForm/AddMealForm.js","Instructions.js","components/Record/Record.js","components/List/List.js","components/OrderByDate/OrderByDate.js","index.js"],"names":["AddWeightForm","_ref","onAddWeight","unit","React","createRef","_useState","useState","_useState2","Object","slicedToArray","weight","setWeight","_useState3","_useState4","show","setShow","handleClose","react_default","a","createElement","Fragment","Button_default","variant","onClick","className","Modal_default","onHide","Header","closeButton","Title","Body","onSubmit","e","preventDefault","console","log","current","value","weightInKg","Math","round","convertToKg","type","placeholder","onChange","target","ref","Footer","AddMealForm","onAddMeal","meal","setMeal","Instructions","href","Record","record","convertToDate","ms","date","Date","month","getMonth","day","getDate","year","getFullYear","time","toLocaleTimeString","concat","class","aria-hidden","desc","List","records","sortBy","orderBy","b","sort","map","Record_Record","key","id","OrderByDate","props","order","onOrderBy","initialRecords","now","rootElement","document","getElementById","ReactDOM","render","setRecords","setOrder","AddMealForm_AddMealForm","toConsumableArray","length","AddWeightForm_AddWeightForm","List_List"],"mappings":"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","file":"static/js/main.14133640.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport \"./AddWeightForm.css\";\nimport Modal from 'react-bootstrap/Modal';\nimport Button from 'react-bootstrap/Button';\n\n\nexport function AddWeightForm({ onAddWeight }) {\n  let unit = React.createRef();\n  const [weight, setWeight] = useState(\"\");\n  const [show, setShow] = useState(false);\n\n  const handleShow = () => {\n    setShow(true);\n  }\n\n  const handleClose = () => {\n    setShow(false);\n  }\n\n  function onSubmitForm(e) {\n    e.preventDefault();\n    console.log(unit.current.value);\n    unit.current.value === 'lb' ? onAddWeight(convertToKg(weight)) : onAddWeight(weight);\n    setWeight(\"\");\n    handleClose();\n  }\n\n  function convertToKg(weight) {\n    const weightInKg = weight * 0.453592;\n    return Math.round(weightInKg*100)/100;\n  }\n\n  return (\n    <>\n        <Button variant=\"primary\" onClick={handleShow} className=\"btn btn-success\">\n          Add Weight\n        </Button>\n\n        <Modal show={show} onHide={handleClose}>\n          <Modal.Header closeButton>\n            <Modal.Title>Add a new weight</Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <form onSubmit={onSubmitForm}>\n              <div className=\"row\">\n              <input\n                type=\"text\"\n                className=\"form-control col-4\"\n                value={weight}\n                placeholder=\"Add a weight...\"\n                onChange={e => setWeight(e.target.value)}\n              />\n              <select ref={unit} className=\"form-control col-2\">\n                <option value=\"kg\">kg</option>\n                <option value=\"lb\">lb</option>\n              </select>\n              <button type=\"submit\" className=\"btn btn-success\">Add weight</button>\n              </div>\n            </form>\n          </Modal.Body>\n          <Modal.Footer>\n            <Button variant=\"secondary\" onClick={handleClose}>\n              Close\n            </Button>\n          </Modal.Footer>\n        </Modal>\n      </>\n  );\n}\n","import React, { useState } from \"react\";\nimport Modal from 'react-bootstrap/Modal';\nimport Button from 'react-bootstrap/Button';\nimport \"./AddMealForm.css\";\n\n\nexport function AddMealForm({ onAddMeal }) {\n\n  const [meal, setMeal] = useState(\"\");\n  const [show, setShow] = useState(false);\n\n  const handleShow = () => {\n    setShow(true);\n  }\n\n  const handleClose = () => {\n    setShow(false);\n  }\n\n  function onSubmitForm(e) {\n    e.preventDefault();\n    onAddMeal(meal);\n    setMeal(\"\");\n    handleClose();\n  }\n\n  return (\n    <>\n        <Button variant=\"primary\" onClick={handleShow}>\n          Add Meal\n        </Button>\n\n        <Modal show={show} onHide={handleClose}>\n          <Modal.Header closeButton>\n            <Modal.Title>Add a new meal</Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n          <form onSubmit={onSubmitForm}>\n            <input\n            type=\"text\"\n            className=\"form-control\"\n            placeholder=\"Add a meal...\"\n            value={meal}\n            onChange={e => setMeal(e.target.value)} />\n            <button type=\"submit\" className=\"btn btn-primary\">Add meal</button>\n          </form>\n          </Modal.Body>\n          <Modal.Footer>\n            <Button variant=\"secondary\" onClick={handleClose}>\n              Close\n            </Button>\n          </Modal.Footer>\n        </Modal>\n      </>\n  );\n}\n","import React from \"react\";\n\nexport default function Instructions() {\n  return (\n    <>\n      <p>\n        This is a health tracker. The user can track their meals and their\n        weights.\n      </p>\n      <p>\n        Following is a list of requirements. I recommend forking this sandbox,\n        but you can also download the code if you want to develop locally.\n      </p>\n      <p>\n        <a href=\"https://www.fuze.com/careers#!/job/1728384\">\n          Submit the exercise along with your resume and cover letter here.\n        </a>\n      </p>\n      <ol>\n        <li>\n          The app is functional (mostly), but it doesn't look great. Make it\n          look presentable.\n        </li>\n        <li>\n          Rather than having a list of meals and a list of weights, our design\n          team would like to have a single list with both types of elements,\n          ordered by date.\n        </li>\n        <li>\n          Our weights don't have any units. Let's store the values in kilograms\n          (to save bytes?) and allow the user to choose whether they want to use\n          pounds or kilograms.\n        </li>\n        <li>\n          Pick a requirement you think will benefit the app and implement it.\n          Use this one to show off.\n        </li>\n      </ol>\n    </>\n  );\n}\n","import React from \"react\";\nimport \"./Record.css\";\nimport 'font-awesome/css/font-awesome.min.css';\nexport function Record( record ) {\n\n  const convertToDate = (ms) => {\n    const date = new Date(ms);\n    const months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n    const month = months[date.getMonth()];\n    const day = date.getDate();\n    const year = date.getFullYear();\n    const time = date.toLocaleTimeString('en-US');\n    return `${month} ${day}, ${year} at ${time}`;\n  }\n\n  const convertToPounds = (weight) => {\n    return Math.round(weight * 2.2 * 100)/100;\n  }\n\n  return (\n          (record.type === 'meal') ?\n\n\n          <li className='meal'><i class=\"fa fa-cutlery\" aria-hidden=\"true\"></i> {record.desc} on <strong>{convertToDate(record.date)}</strong></li>\n          :\n          <li className='weight'><i class=\"fa fa-balance-scale\" aria-hidden=\"true\"></i> {record.desc} kg / {convertToPounds(record.desc)} lb on <strong>{convertToDate(record.date)}</strong></li>\n  );\n}\n","import React from \"react\";\nimport {Record} from '../../components/Record/Record';\nimport \"./List.css\";\nexport function List( {records, orderBy} ) {\n  const sortBy = orderBy === \"newest\" ? (a, b) => b.date - a.date : (a, b) => a.date - b.date;\n  return (\n    <>\n      <ul className=\"list\">\n        {records.sort(sortBy).map(record => (\n          <Record\n          key={record.id}\n          type={record.type}\n          desc={record.desc}\n          date={record.date} />\n        ))}\n      </ul>\n    </>\n  );\n}\n","import React from 'react';\n\nexport function OrderByDate(props) {\n  let order = React.createRef();\n\n  function handleOnChange(e) {\n    props.onOrderBy(order.current.value);\n  }\n\n  return (\n    <select ref={order} onChange={handleOnChange} className=\"form-control\">\n      <option value=\"newest\">Date: newest first</option>\n      <option value=\"oldest\">Date: oldest first</option>\n    </select>\n  );\n}\n","import React, { useState } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport {AddWeightForm} from \"./components/AddWeightForm/AddWeightForm\";\nimport {AddMealForm} from \"./components/AddMealForm/AddMealForm\"\n\nimport \"./styles.css\";\nimport 'bootstrap/dist/css/bootstrap.css';\nimport Instructions from \"./Instructions\";\n\nimport { List } from \"./components/List/List\";\n\nimport { OrderByDate } from \"./components/OrderByDate/OrderByDate\";\n\nconst initialRecords = [{id: 1, type:\"meal\", desc: \"spaghetti\", date: Date.now() }, {id: 2, type:\"weight\", desc: \"111\", date: Date.now() }]\n\nfunction App() {\n  const [records, setRecords] = useState(initialRecords);\n  const [order, setOrder] = useState(\"newest\");\n\n  const onAddMeal = meal => {\n    setRecords(records => [...records, {id: records.length + 1, type:\"meal\", desc: meal, date: Date.now() }]);\n  };\n\n  const onAddWeight = weight => {\n    setRecords(records => [...records, {id: records.length + 1, type:\"weight\", desc: weight, date: Date.now() }]);\n  };\n\n  const onOrderBy = (order) => {\n    setOrder(order);\n  }\n\n  return (\n    <div className=\"App\">\n      <Instructions />\n      <h2>Health Tracker</h2>\n      <div class=\"container\">\n        <div class=\"row\">\n          <div>\n            <AddMealForm onAddMeal={onAddMeal} />\n          </div>\n          <div>\n            <AddWeightForm onAddWeight={onAddWeight} />\n          </div>\n          <div>\n            <OrderByDate onOrderBy={onOrderBy} />\n          </div>\n        </div>\n      </div>\n\n\n\n      <List records={records} orderBy={order}/>\n    </div>\n  );\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}