{"version":3,"sources":["Instructions.js","components/MealForm.js","components/WeightForm.js","components/Meals.js","components/Weights.js","index.js"],"names":["Instructions","react_default","a","createElement","Fragment","href","MealForm","_ref","onAddMeal","_useState","useState","_useState2","Object","slicedToArray","meal","setMeal","onSubmit","e","preventDefault","type","value","onChange","target","WeightForm","onAddWeight","weight","setWeight","Meals","meals","map","text","Weights","weights","number","initialMeals","date","Date","now","initialWeights","rootElement","document","getElementById","ReactDOM","render","setMeals","_useState3","_useState4","setWeights","sortedMeals","sort","b","sortedWeights","className","concat","toConsumableArray"],"mappings":"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","file":"static/js/main.596dc55d.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default function Instructions() {\n  return (\n    <>\n      <p>\n        This is a health tracker. The user can track their meals and their\n        weights.\n      </p>\n      <p>\n        Following is a list of requirements. I recommend forking this sandbox,\n        but you can also download the code if you want to develop locally.\n      </p>\n      <p>\n        <a href=\"https://www.fuze.com/careers#!/job/1728384\">\n          Submit the exercise along with your resume and cover letter here.\n        </a>\n      </p>\n      <ol>\n        <li>\n          The app is functional (mostly), but it doesn't look great. Make it\n          look presentable.\n        </li>\n        <li>\n          Rather than having a list of meals and a list of weights, our design\n          team would like to have a single list with both types of elements,\n          ordered by date.\n        </li>\n        <li>\n          Our weights don't have any units. Let's store the values in kilograms\n          (to save bytes?) and allow the user to choose whether they want to use\n          pounds or kilograms.\n        </li>\n        <li>\n          Pick a requirement you think will benefit the app and implement it.\n          Use this one to show off.\n        </li>\n      </ol>\n    </>\n  );\n}\n","import React, { useState } from \"react\";\nexport function MealForm({ onAddMeal }) {\n  const [meal, setMeal] = useState(\"\");\n  function onSubmitForm(e) {\n    e.preventDefault();\n    onAddMeal(meal);\n    setMeal(\"\");\n  }\n  return (\n    <form onSubmit={onSubmitForm}>\n      <input type=\"text\" value={meal} onChange={e => setMeal(e.target.value)} />\n      <button type=\"submit\">Add meal</button>\n    </form>\n  );\n}\n","import React, { useState } from \"react\";\nexport function WeightForm({ onAddWeight }) {\n  const [weight, setWeight] = useState(\"\");\n  function onSubmitForm(e) {\n    e.preventDefault();\n    onAddWeight(weight);\n    setWeight(\"\");\n  }\n  return (\n    <form onSubmit={onSubmitForm}>\n      <input\n        type=\"text\"\n        value={weight}\n        onChange={e => setWeight(e.target.value)}\n      />\n      <button type=\"submit\">Add weight</button>\n    </form>\n  );\n}\n","import React from \"react\";\nexport function Meals({ meals }) {\n  return (\n    <>\n      <h2>Meals</h2>\n      <ul>\n        {meals.map(meal => (\n          <li>{meal.text}</li>\n        ))}\n      </ul>\n    </>\n  );\n}\n","import React from \"react\";\nexport function Weights({ weights }) {\n  return (\n    <>\n      <h2>Weights</h2>\n      <ul>\n        {weights.map(weight => (\n          <li>{weight.number}</li>\n        ))}\n      </ul>\n    </>\n  );\n}\n","import React, { useState } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport \"./styles.css\";\nimport Instructions from \"./Instructions\";\nimport { MealForm } from \"./components/MealForm\";\nimport { WeightForm } from \"./components/WeightForm\";\nimport { Meals } from \"./components/Meals\";\nimport { Weights } from \"./components/Weights\";\n\nconst initialMeals = [{ text: \"spaghetti\", date: Date.now() }];\nconst initialWeights = [{ number: 155, date: Date.now() }];\n\nfunction App() {\n  const [meals, setMeals] = useState(initialMeals);\n  const [weights, setWeights] = useState(initialWeights);\n\n  const onAddMeal = meal => {\n    setMeals(meals => [...meals, { text: meal, date: Date.now() }]);\n  };\n\n  const onAddWeight = weight => {\n    setWeights(weights => [...weights, { number: weight, date: Date.now() }]);\n  };\n\n  const sortedMeals = meals.sort((a, b) => new Date(b.date) - new Date(a.date));\n  const sortedWeights = weights.sort(\n    (a, b) => new Date(b.date) - new Date(a.date)\n  );\n\n  return (\n    <div className=\"App\">\n      <Instructions />\n      <MealForm onAddMeal={onAddMeal} />\n      <Meals meals={sortedMeals} />\n      <WeightForm onAddWeight={onAddWeight} />\n      <Weights weights={sortedWeights} />\n    </div>\n  );\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}